// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: usp-record-1-1.proto

package usp

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Record_PayloadSecurity int32

const (
	Record_PLAINTEXT Record_PayloadSecurity = 0
	Record_TLS12     Record_PayloadSecurity = 1
)

var Record_PayloadSecurity_name = map[int32]string{
	0: "PLAINTEXT",
	1: "TLS12",
}

var Record_PayloadSecurity_value = map[string]int32{
	"PLAINTEXT": 0,
	"TLS12":     1,
}

func (x Record_PayloadSecurity) String() string {
	return proto.EnumName(Record_PayloadSecurity_name, int32(x))
}

func (Record_PayloadSecurity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e3ff6e167ceb780a, []int{0, 0}
}

type SessionContextRecord_PayloadSARState int32

const (
	SessionContextRecord_NONE      SessionContextRecord_PayloadSARState = 0
	SessionContextRecord_BEGIN     SessionContextRecord_PayloadSARState = 1
	SessionContextRecord_INPROCESS SessionContextRecord_PayloadSARState = 2
	SessionContextRecord_COMPLETE  SessionContextRecord_PayloadSARState = 3
)

var SessionContextRecord_PayloadSARState_name = map[int32]string{
	0: "NONE",
	1: "BEGIN",
	2: "INPROCESS",
	3: "COMPLETE",
}

var SessionContextRecord_PayloadSARState_value = map[string]int32{
	"NONE":      0,
	"BEGIN":     1,
	"INPROCESS": 2,
	"COMPLETE":  3,
}

func (x SessionContextRecord_PayloadSARState) String() string {
	return proto.EnumName(SessionContextRecord_PayloadSARState_name, int32(x))
}

func (SessionContextRecord_PayloadSARState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e3ff6e167ceb780a, []int{2, 0}
}

type Record struct {
	Version         string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ToId            string                 `protobuf:"bytes,2,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	FromId          string                 `protobuf:"bytes,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PayloadSecurity Record_PayloadSecurity `protobuf:"varint,4,opt,name=payload_security,json=payloadSecurity,proto3,enum=usp_record.Record_PayloadSecurity" json:"payload_security,omitempty"`
	MacSignature    []byte                 `protobuf:"bytes,5,opt,name=mac_signature,json=macSignature,proto3" json:"mac_signature,omitempty"`
	SenderCert      []byte                 `protobuf:"bytes,6,opt,name=sender_cert,json=senderCert,proto3" json:"sender_cert,omitempty"`
	// Types that are valid to be assigned to RecordType:
	//	*Record_NoSessionContext
	//	*Record_SessionContext
	RecordType           isRecord_RecordType `protobuf_oneof:"record_type"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ff6e167ceb780a, []int{0}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

type isRecord_RecordType interface {
	isRecord_RecordType()
}

type Record_NoSessionContext struct {
	NoSessionContext *NoSessionContextRecord `protobuf:"bytes,7,opt,name=no_session_context,json=noSessionContext,proto3,oneof" json:"no_session_context,omitempty"`
}
type Record_SessionContext struct {
	SessionContext *SessionContextRecord `protobuf:"bytes,8,opt,name=session_context,json=sessionContext,proto3,oneof" json:"session_context,omitempty"`
}

func (*Record_NoSessionContext) isRecord_RecordType() {}
func (*Record_SessionContext) isRecord_RecordType()   {}

func (m *Record) GetRecordType() isRecord_RecordType {
	if m != nil {
		return m.RecordType
	}
	return nil
}

func (m *Record) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Record) GetToId() string {
	if m != nil {
		return m.ToId
	}
	return ""
}

func (m *Record) GetFromId() string {
	if m != nil {
		return m.FromId
	}
	return ""
}

func (m *Record) GetPayloadSecurity() Record_PayloadSecurity {
	if m != nil {
		return m.PayloadSecurity
	}
	return Record_PLAINTEXT
}

func (m *Record) GetMacSignature() []byte {
	if m != nil {
		return m.MacSignature
	}
	return nil
}

func (m *Record) GetSenderCert() []byte {
	if m != nil {
		return m.SenderCert
	}
	return nil
}

func (m *Record) GetNoSessionContext() *NoSessionContextRecord {
	if x, ok := m.GetRecordType().(*Record_NoSessionContext); ok {
		return x.NoSessionContext
	}
	return nil
}

func (m *Record) GetSessionContext() *SessionContextRecord {
	if x, ok := m.GetRecordType().(*Record_SessionContext); ok {
		return x.SessionContext
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Record) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Record_NoSessionContext)(nil),
		(*Record_SessionContext)(nil),
	}
}

type NoSessionContextRecord struct {
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoSessionContextRecord) Reset()         { *m = NoSessionContextRecord{} }
func (m *NoSessionContextRecord) String() string { return proto.CompactTextString(m) }
func (*NoSessionContextRecord) ProtoMessage()    {}
func (*NoSessionContextRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ff6e167ceb780a, []int{1}
}
func (m *NoSessionContextRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoSessionContextRecord.Unmarshal(m, b)
}
func (m *NoSessionContextRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoSessionContextRecord.Marshal(b, m, deterministic)
}
func (m *NoSessionContextRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoSessionContextRecord.Merge(m, src)
}
func (m *NoSessionContextRecord) XXX_Size() int {
	return xxx_messageInfo_NoSessionContextRecord.Size(m)
}
func (m *NoSessionContextRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_NoSessionContextRecord.DiscardUnknown(m)
}

var xxx_messageInfo_NoSessionContextRecord proto.InternalMessageInfo

func (m *NoSessionContextRecord) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SessionContextRecord struct {
	SessionId            uint64                               `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SequenceId           uint64                               `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	ExpectedId           uint64                               `protobuf:"varint,3,opt,name=expected_id,json=expectedId,proto3" json:"expected_id,omitempty"`
	RetransmitId         uint64                               `protobuf:"varint,4,opt,name=retransmit_id,json=retransmitId,proto3" json:"retransmit_id,omitempty"`
	PayloadSarState      SessionContextRecord_PayloadSARState `protobuf:"varint,5,opt,name=payload_sar_state,json=payloadSarState,proto3,enum=usp_record.SessionContextRecord_PayloadSARState" json:"payload_sar_state,omitempty"`
	PayloadrecSarState   SessionContextRecord_PayloadSARState `protobuf:"varint,6,opt,name=payloadrec_sar_state,json=payloadrecSarState,proto3,enum=usp_record.SessionContextRecord_PayloadSARState" json:"payloadrec_sar_state,omitempty"`
	Payload              [][]byte                             `protobuf:"bytes,7,rep,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *SessionContextRecord) Reset()         { *m = SessionContextRecord{} }
func (m *SessionContextRecord) String() string { return proto.CompactTextString(m) }
func (*SessionContextRecord) ProtoMessage()    {}
func (*SessionContextRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ff6e167ceb780a, []int{2}
}
func (m *SessionContextRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionContextRecord.Unmarshal(m, b)
}
func (m *SessionContextRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionContextRecord.Marshal(b, m, deterministic)
}
func (m *SessionContextRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionContextRecord.Merge(m, src)
}
func (m *SessionContextRecord) XXX_Size() int {
	return xxx_messageInfo_SessionContextRecord.Size(m)
}
func (m *SessionContextRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionContextRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SessionContextRecord proto.InternalMessageInfo

func (m *SessionContextRecord) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SessionContextRecord) GetSequenceId() uint64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *SessionContextRecord) GetExpectedId() uint64 {
	if m != nil {
		return m.ExpectedId
	}
	return 0
}

func (m *SessionContextRecord) GetRetransmitId() uint64 {
	if m != nil {
		return m.RetransmitId
	}
	return 0
}

func (m *SessionContextRecord) GetPayloadSarState() SessionContextRecord_PayloadSARState {
	if m != nil {
		return m.PayloadSarState
	}
	return SessionContextRecord_NONE
}

func (m *SessionContextRecord) GetPayloadrecSarState() SessionContextRecord_PayloadSARState {
	if m != nil {
		return m.PayloadrecSarState
	}
	return SessionContextRecord_NONE
}

func (m *SessionContextRecord) GetPayload() [][]byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterEnum("usp_record.Record_PayloadSecurity", Record_PayloadSecurity_name, Record_PayloadSecurity_value)
	proto.RegisterEnum("usp_record.SessionContextRecord_PayloadSARState", SessionContextRecord_PayloadSARState_name, SessionContextRecord_PayloadSARState_value)
	proto.RegisterType((*Record)(nil), "usp_record.Record")
	proto.RegisterType((*NoSessionContextRecord)(nil), "usp_record.NoSessionContextRecord")
	proto.RegisterType((*SessionContextRecord)(nil), "usp_record.SessionContextRecord")
}

func init() { proto.RegisterFile("usp-record-1-1.proto", fileDescriptor_e3ff6e167ceb780a) }

var fileDescriptor_e3ff6e167ceb780a = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4f, 0x8f, 0xd2, 0x40,
	0x18, 0xc6, 0xb7, 0x4b, 0x17, 0x96, 0x77, 0xf9, 0x53, 0x47, 0xa2, 0xbd, 0x18, 0x9b, 0x7a, 0x21,
	0x31, 0xb0, 0x82, 0x47, 0x4f, 0x0b, 0x69, 0xb4, 0x91, 0x2d, 0x64, 0xca, 0xc1, 0x18, 0x93, 0xa6,
	0x74, 0x46, 0x6c, 0xa4, 0x9d, 0x3a, 0x33, 0x35, 0xcb, 0x87, 0xf3, 0xe2, 0x27, 0x33, 0xed, 0x50,
	0xfe, 0x65, 0x8d, 0x89, 0x37, 0xe6, 0xc7, 0xd3, 0xe7, 0x9d, 0x3e, 0xcf, 0x5b, 0xe8, 0xe5, 0x22,
	0x1b, 0x70, 0x1a, 0x31, 0x4e, 0x06, 0xa3, 0xc1, 0x68, 0x98, 0x71, 0x26, 0x19, 0x82, 0x5c, 0x64,
	0x81, 0xa2, 0xf6, 0xef, 0x1a, 0xd4, 0x71, 0xf9, 0x13, 0x99, 0xd0, 0xf8, 0x49, 0xb9, 0x88, 0x59,
	0x6a, 0x6a, 0x96, 0xd6, 0x6f, 0xe2, 0xea, 0x88, 0x9e, 0xc2, 0x95, 0x64, 0x41, 0x4c, 0xcc, 0xcb,
	0x92, 0xeb, 0x92, 0xb9, 0x04, 0x3d, 0x87, 0xc6, 0x57, 0xce, 0x92, 0x02, 0xd7, 0x4a, 0x5c, 0x2f,
	0x8e, 0x2e, 0x41, 0xf7, 0x60, 0x64, 0xe1, 0x76, 0xc3, 0x42, 0x12, 0x08, 0x1a, 0xe5, 0x3c, 0x96,
	0x5b, 0x53, 0xb7, 0xb4, 0x7e, 0x67, 0x6c, 0x0f, 0x0f, 0x93, 0x87, 0x6a, 0xea, 0x70, 0xa1, 0xa4,
	0xfe, 0x4e, 0x89, 0xbb, 0xd9, 0x29, 0x40, 0xaf, 0xa0, 0x9d, 0x84, 0x51, 0x20, 0xe2, 0x75, 0x1a,
	0xca, 0x9c, 0x53, 0xf3, 0xca, 0xd2, 0xfa, 0x2d, 0xdc, 0x4a, 0xc2, 0xc8, 0xaf, 0x18, 0x7a, 0x09,
	0x37, 0x82, 0xa6, 0x84, 0xf2, 0x20, 0xa2, 0x5c, 0x9a, 0xf5, 0x52, 0x02, 0x0a, 0x4d, 0x29, 0x97,
	0x08, 0x03, 0x4a, 0x59, 0x20, 0xa8, 0x28, 0x5e, 0x28, 0x88, 0x58, 0x2a, 0xe9, 0x83, 0x34, 0x1b,
	0x96, 0xd6, 0xbf, 0x39, 0xbd, 0x96, 0xc7, 0x7c, 0x25, 0x9a, 0x2a, 0x8d, 0xba, 0xe6, 0x87, 0x0b,
	0x6c, 0xa4, 0x67, 0xff, 0xa0, 0x8f, 0xd0, 0x3d, 0x37, 0xbc, 0x2e, 0x0d, 0xad, 0x63, 0xc3, 0xbf,
	0xd8, 0x75, 0xc4, 0x09, 0xb7, 0x5f, 0x43, 0xf7, 0x2c, 0x0a, 0xd4, 0x86, 0xe6, 0x62, 0x76, 0xe7,
	0x7a, 0x4b, 0xe7, 0xd3, 0xd2, 0xb8, 0x40, 0x4d, 0xb8, 0x5a, 0xce, 0xfc, 0xd1, 0xd8, 0xd0, 0x26,
	0x6d, 0xb8, 0x51, 0xee, 0x81, 0xdc, 0x66, 0xd4, 0x1e, 0xc3, 0xb3, 0xc7, 0xaf, 0x5d, 0x74, 0xba,
	0xcb, 0xb3, 0xec, 0xae, 0x85, 0xab, 0xa3, 0xfd, 0xab, 0x06, 0xbd, 0x47, 0x1f, 0x79, 0x01, 0x50,
	0xbd, 0x55, 0x4c, 0xca, 0x4d, 0xd0, 0x71, 0x73, 0x47, 0x5c, 0xa2, 0x92, 0xfe, 0x91, 0xd3, 0x34,
	0xa2, 0xd5, 0x46, 0xe8, 0x45, 0xd2, 0x0a, 0x29, 0x01, 0x7d, 0xc8, 0x68, 0x24, 0x29, 0xa9, 0x76,
	0x43, 0xc7, 0x50, 0x21, 0x97, 0x14, 0x85, 0x72, 0x2a, 0x79, 0x98, 0x8a, 0x24, 0x96, 0x85, 0x44,
	0x2f, 0x25, 0xad, 0x03, 0x74, 0x09, 0xfa, 0x02, 0x4f, 0xf6, 0x4b, 0x14, 0xf2, 0x40, 0xc8, 0x50,
	0xaa, 0xe6, 0x3b, 0xe3, 0x37, 0xff, 0x4a, 0x77, 0xbf, 0x53, 0x77, 0xd8, 0x2f, 0x9e, 0x3b, 0xec,
	0x54, 0xc8, 0x4b, 0x80, 0x56, 0xd0, 0xdb, 0x21, 0x4e, 0xa3, 0xa3, 0x01, 0xf5, 0xff, 0x1c, 0x80,
	0x0e, 0x6e, 0xfb, 0x19, 0x47, 0xd1, 0x37, 0xac, 0xda, 0x71, 0xf4, 0xd3, 0x43, 0xd5, 0x3b, 0x03,
	0x74, 0x0d, 0xba, 0x37, 0xf7, 0x1c, 0xd5, 0xf2, 0xc4, 0x79, 0xef, 0x7a, 0x86, 0x56, 0xf4, 0xef,
	0x7a, 0x0b, 0x3c, 0x9f, 0x3a, 0xbe, 0x6f, 0x5c, 0xa2, 0x16, 0x5c, 0x4f, 0xe7, 0xf7, 0x8b, 0x99,
	0xb3, 0x74, 0x8c, 0xda, 0xc4, 0xfe, 0x6c, 0xad, 0x63, 0xf9, 0x2d, 0x5f, 0x0d, 0x23, 0x96, 0xdc,
	0x4a, 0xba, 0xa1, 0x29, 0xe3, 0x69, 0x22, 0x6e, 0xc5, 0x77, 0xb6, 0xce, 0x37, 0xef, 0x72, 0x91,
	0xad, 0xea, 0xe5, 0xf7, 0xfe, 0xf6, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x3d, 0x6a, 0x89,
	0x07, 0x04, 0x00, 0x00,
}
