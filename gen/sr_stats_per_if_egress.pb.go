// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sr_stats_per_if_egress.proto

package gen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type SrStatsPerIfEgress struct {
	// List of SR stats per IF egress records
	PerIfRecords         []*SegmentRoutingInterfaceRecord `protobuf:"bytes,1,rep,name=per_if_records,json=perIfRecords" json:"per_if_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *SrStatsPerIfEgress) Reset()         { *m = SrStatsPerIfEgress{} }
func (m *SrStatsPerIfEgress) String() string { return proto.CompactTextString(m) }
func (*SrStatsPerIfEgress) ProtoMessage()    {}
func (*SrStatsPerIfEgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_d06dd05b32f9304e, []int{0}
}

func (m *SrStatsPerIfEgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SrStatsPerIfEgress.Unmarshal(m, b)
}
func (m *SrStatsPerIfEgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SrStatsPerIfEgress.Marshal(b, m, deterministic)
}
func (m *SrStatsPerIfEgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrStatsPerIfEgress.Merge(m, src)
}
func (m *SrStatsPerIfEgress) XXX_Size() int {
	return xxx_messageInfo_SrStatsPerIfEgress.Size(m)
}
func (m *SrStatsPerIfEgress) XXX_DiscardUnknown() {
	xxx_messageInfo_SrStatsPerIfEgress.DiscardUnknown(m)
}

var xxx_messageInfo_SrStatsPerIfEgress proto.InternalMessageInfo

func (m *SrStatsPerIfEgress) GetPerIfRecords() []*SegmentRoutingInterfaceRecord {
	if m != nil {
		return m.PerIfRecords
	}
	return nil
}

//
// SR statistics record
//
type SegmentRoutingInterfaceRecord struct {
	// Interface name, e.g., xe-0/0/0
	IfName *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`
	// Name of parent for AE interface, if applicable
	ParentAeName *string `protobuf:"bytes,2,opt,name=parent_ae_name,json=parentAeName" json:"parent_ae_name,omitempty"`
	// Name of the counter. This is useful when an interface has multiple counters.
	// for some scenarios, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,3,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Traffic statistics
	IngressStats         *SegmentRoutingIfStats `protobuf:"bytes,4,opt,name=ingress_stats,json=ingressStats" json:"ingress_stats,omitempty"`
	EgressStats          *SegmentRoutingIfStats `protobuf:"bytes,5,opt,name=egress_stats,json=egressStats" json:"egress_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SegmentRoutingInterfaceRecord) Reset()         { *m = SegmentRoutingInterfaceRecord{} }
func (m *SegmentRoutingInterfaceRecord) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingInterfaceRecord) ProtoMessage()    {}
func (*SegmentRoutingInterfaceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d06dd05b32f9304e, []int{1}
}

func (m *SegmentRoutingInterfaceRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentRoutingInterfaceRecord.Unmarshal(m, b)
}
func (m *SegmentRoutingInterfaceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentRoutingInterfaceRecord.Marshal(b, m, deterministic)
}
func (m *SegmentRoutingInterfaceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingInterfaceRecord.Merge(m, src)
}
func (m *SegmentRoutingInterfaceRecord) XXX_Size() int {
	return xxx_messageInfo_SegmentRoutingInterfaceRecord.Size(m)
}
func (m *SegmentRoutingInterfaceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingInterfaceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingInterfaceRecord proto.InternalMessageInfo

func (m *SegmentRoutingInterfaceRecord) GetIfName() string {
	if m != nil && m.IfName != nil {
		return *m.IfName
	}
	return ""
}

func (m *SegmentRoutingInterfaceRecord) GetParentAeName() string {
	if m != nil && m.ParentAeName != nil {
		return *m.ParentAeName
	}
	return ""
}

func (m *SegmentRoutingInterfaceRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *SegmentRoutingInterfaceRecord) GetIngressStats() *SegmentRoutingIfStats {
	if m != nil {
		return m.IngressStats
	}
	return nil
}

func (m *SegmentRoutingInterfaceRecord) GetEgressStats() *SegmentRoutingIfStats {
	if m != nil {
		return m.EgressStats
	}
	return nil
}

type SegmentRoutingIfStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters.
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentRoutingIfStats) Reset()         { *m = SegmentRoutingIfStats{} }
func (m *SegmentRoutingIfStats) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingIfStats) ProtoMessage()    {}
func (*SegmentRoutingIfStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_d06dd05b32f9304e, []int{2}
}

func (m *SegmentRoutingIfStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentRoutingIfStats.Unmarshal(m, b)
}
func (m *SegmentRoutingIfStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentRoutingIfStats.Marshal(b, m, deterministic)
}
func (m *SegmentRoutingIfStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingIfStats.Merge(m, src)
}
func (m *SegmentRoutingIfStats) XXX_Size() int {
	return xxx_messageInfo_SegmentRoutingIfStats.Size(m)
}
func (m *SegmentRoutingIfStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingIfStats.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingIfStats proto.InternalMessageInfo

func (m *SegmentRoutingIfStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *SegmentRoutingIfStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *SegmentRoutingIfStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *SegmentRoutingIfStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprSrStatsPerIfEgressExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*SrStatsPerIfEgress)(nil),
	Field:         17,
	Name:          "jnpr_sr_stats_per_if_egress_ext",
	Tag:           "bytes,17,opt,name=jnpr_sr_stats_per_if_egress_ext",
	Filename:      "sr_stats_per_if_egress.proto",
}

func init() {
	proto.RegisterType((*SrStatsPerIfEgress)(nil), "SrStatsPerIfEgress")
	proto.RegisterType((*SegmentRoutingInterfaceRecord)(nil), "SegmentRoutingInterfaceRecord")
	proto.RegisterType((*SegmentRoutingIfStats)(nil), "SegmentRoutingIfStats")
	proto.RegisterExtension(E_JnprSrStatsPerIfEgressExt)
}

func init() { proto.RegisterFile("sr_stats_per_if_egress.proto", fileDescriptor_d06dd05b32f9304e) }

var fileDescriptor_d06dd05b32f9304e = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x6f, 0xd4, 0x30,
	0x10, 0xc5, 0xe5, 0xed, 0x2e, 0x6d, 0x27, 0xa1, 0x12, 0xae, 0x80, 0xf0, 0xaf, 0x8d, 0xf6, 0x80,
	0x22, 0x21, 0xed, 0xa1, 0x37, 0xe0, 0x02, 0x88, 0x1e, 0xca, 0xa1, 0x42, 0xce, 0x8d, 0x8b, 0x65,
	0xc2, 0x64, 0x15, 0x4a, 0x6c, 0x6b, 0x3c, 0x2b, 0xda, 0x2b, 0x1f, 0x80, 0xef, 0xc0, 0x37, 0x45,
	0xb6, 0x17, 0xba, 0x6a, 0xab, 0x3d, 0xfa, 0xbd, 0xdf, 0x9b, 0x64, 0x9e, 0x06, 0x9e, 0x07, 0xd2,
	0x81, 0x0d, 0x07, 0xed, 0x91, 0xf4, 0xd0, 0x6b, 0x5c, 0x12, 0x86, 0xb0, 0xf0, 0xe4, 0xd8, 0x3d,
	0x3d, 0x64, 0xfc, 0x81, 0x23, 0x32, 0x5d, 0x69, 0x76, 0x3e, 0x8b, 0xf3, 0x2f, 0x20, 0x5b, 0x6a,
	0x63, 0xe6, 0x33, 0xd2, 0x59, 0x7f, 0x9a, 0x02, 0xf2, 0x23, 0x1c, 0xac, 0x27, 0x10, 0x76, 0x8e,
	0xbe, 0x85, 0x4a, 0xd4, 0x3b, 0x4d, 0x71, 0x72, 0xb4, 0x68, 0x71, 0x39, 0xa2, 0x65, 0xe5, 0x56,
	0x3c, 0xd8, 0xe5, 0x99, 0x65, 0xa4, 0xde, 0x74, 0xa8, 0x12, 0xa6, 0x4a, 0x1f, 0x87, 0xe4, 0x47,
	0x98, 0xff, 0x9e, 0xc0, 0x8b, 0xad, 0xbc, 0x3c, 0x82, 0xdd, 0xa1, 0xd7, 0xd6, 0x8c, 0x58, 0x89,
	0x7a, 0xd2, 0xec, 0x7f, 0x98, 0xfd, 0x7a, 0x37, 0xd9, 0x13, 0xea, 0xde, 0xd0, 0x9f, 0x9b, 0x11,
	0xe5, 0x2b, 0x38, 0xf0, 0x86, 0xd0, 0xb2, 0x36, 0x98, 0xb1, 0x49, 0x2d, 0xae, 0xb1, 0x32, 0x9b,
	0xef, 0x31, 0xc1, 0x0d, 0x94, 0x9d, 0x5b, 0xc5, 0x2f, 0x64, 0x74, 0x67, 0x13, 0x2d, 0xd6, 0x56,
	0x22, 0xdf, 0xc2, 0xfd, 0xc1, 0xa6, 0x4d, 0x73, 0x5d, 0xd5, 0xb4, 0x16, 0x4d, 0x71, 0xf2, 0xe8,
	0xe6, 0x76, 0x7d, 0x2a, 0x46, 0x95, 0x6b, 0x38, 0xbd, 0xe4, 0x6b, 0x28, 0x71, 0x33, 0x3b, 0xdb,
	0x9a, 0x2d, 0xf0, 0x3a, 0x3a, 0xff, 0x23, 0xe0, 0xe1, 0x9d, 0x98, 0x3c, 0x86, 0x5d, 0x6f, 0xba,
	0x0b, 0xe4, 0xd8, 0xb4, 0x68, 0xa6, 0xe9, 0xb7, 0x2b, 0xa1, 0xfe, 0xa9, 0xf2, 0x19, 0xcc, 0xbe,
	0x5e, 0x31, 0x86, 0x54, 0xc0, 0x7f, 0x3b, 0x6b, 0xf2, 0x25, 0x14, 0x99, 0xd3, 0x64, 0x38, 0x2f,
	0x9e, 0x91, 0x5a, 0x28, 0xc8, 0x8e, 0x32, 0x8c, 0x72, 0x0e, 0xfb, 0x31, 0x90, 0xa9, 0xe9, 0x26,
	0xb5, 0x17, 0xf5, 0xc8, 0xbc, 0xf1, 0x70, 0xfc, 0xdd, 0x7a, 0xd2, 0x77, 0x9f, 0x92, 0xc6, 0x4b,
	0x96, 0x8f, 0x17, 0x9f, 0x56, 0x76, 0xf0, 0x48, 0xe7, 0xc8, 0x3f, 0x1d, 0x5d, 0x84, 0x16, 0x6d,
	0x70, 0x14, 0xaa, 0x07, 0xa9, 0x8a, 0xc3, 0xc5, 0xed, 0x8b, 0x52, 0x4f, 0xe2, 0xd0, 0xdb, 0xfa,
	0xe9, 0x25, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xab, 0xf7, 0x32, 0x5e, 0xb6, 0x02, 0x00, 0x00,
}
