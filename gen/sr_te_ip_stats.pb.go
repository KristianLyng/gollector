// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sr_te_ip_stats.proto

package gen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type SrTeIpStats struct {
	// List of SR TE stats per IP and Color records
	TeIpStats            []*SegmentRoutingTeIpRecord `protobuf:"bytes,1,rep,name=te_ip_stats,json=teIpStats" json:"te_ip_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SrTeIpStats) Reset()         { *m = SrTeIpStats{} }
func (m *SrTeIpStats) String() string { return proto.CompactTextString(m) }
func (*SrTeIpStats) ProtoMessage()    {}
func (*SrTeIpStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_891ddfdc1085283c, []int{0}
}

func (m *SrTeIpStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SrTeIpStats.Unmarshal(m, b)
}
func (m *SrTeIpStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SrTeIpStats.Marshal(b, m, deterministic)
}
func (m *SrTeIpStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrTeIpStats.Merge(m, src)
}
func (m *SrTeIpStats) XXX_Size() int {
	return xxx_messageInfo_SrTeIpStats.Size(m)
}
func (m *SrTeIpStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SrTeIpStats.DiscardUnknown(m)
}

var xxx_messageInfo_SrTeIpStats proto.InternalMessageInfo

func (m *SrTeIpStats) GetTeIpStats() []*SegmentRoutingTeIpRecord {
	if m != nil {
		return m.TeIpStats
	}
	return nil
}

//
// SR TE BSID statistics record
//
type SegmentRoutingTeIpRecord struct {
	// Ip prefix of endpoint
	ToIpPrefix *string `protobuf:"bytes,2,req,name=to_ip_prefix,json=toIpPrefix" json:"to_ip_prefix,omitempty"`
	// Policy color value
	ColorIdentifier *uint32 `protobuf:"varint,3,opt,name=color_identifier,json=colorIdentifier" json:"color_identifier,omitempty"`
	// Instance Identifier for cases when RPD creates multiple instances
	InstanceIdentifier *uint32 `protobuf:"varint,4,opt,name=instance_identifier,json=instanceIdentifier" json:"instance_identifier,omitempty"`
	// Name of the counter. This is useful when an SR label has multiple counters.
	// For some scenarios like routing restart, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,5,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Statistics
	Stats                *SegmentRoutingTeIpStats `protobuf:"bytes,6,opt,name=stats" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SegmentRoutingTeIpRecord) Reset()         { *m = SegmentRoutingTeIpRecord{} }
func (m *SegmentRoutingTeIpRecord) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingTeIpRecord) ProtoMessage()    {}
func (*SegmentRoutingTeIpRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_891ddfdc1085283c, []int{1}
}

func (m *SegmentRoutingTeIpRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentRoutingTeIpRecord.Unmarshal(m, b)
}
func (m *SegmentRoutingTeIpRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentRoutingTeIpRecord.Marshal(b, m, deterministic)
}
func (m *SegmentRoutingTeIpRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingTeIpRecord.Merge(m, src)
}
func (m *SegmentRoutingTeIpRecord) XXX_Size() int {
	return xxx_messageInfo_SegmentRoutingTeIpRecord.Size(m)
}
func (m *SegmentRoutingTeIpRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingTeIpRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingTeIpRecord proto.InternalMessageInfo

func (m *SegmentRoutingTeIpRecord) GetToIpPrefix() string {
	if m != nil && m.ToIpPrefix != nil {
		return *m.ToIpPrefix
	}
	return ""
}

func (m *SegmentRoutingTeIpRecord) GetColorIdentifier() uint32 {
	if m != nil && m.ColorIdentifier != nil {
		return *m.ColorIdentifier
	}
	return 0
}

func (m *SegmentRoutingTeIpRecord) GetInstanceIdentifier() uint32 {
	if m != nil && m.InstanceIdentifier != nil {
		return *m.InstanceIdentifier
	}
	return 0
}

func (m *SegmentRoutingTeIpRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *SegmentRoutingTeIpRecord) GetStats() *SegmentRoutingTeIpStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type SegmentRoutingTeIpStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentRoutingTeIpStats) Reset()         { *m = SegmentRoutingTeIpStats{} }
func (m *SegmentRoutingTeIpStats) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingTeIpStats) ProtoMessage()    {}
func (*SegmentRoutingTeIpStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_891ddfdc1085283c, []int{2}
}

func (m *SegmentRoutingTeIpStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentRoutingTeIpStats.Unmarshal(m, b)
}
func (m *SegmentRoutingTeIpStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentRoutingTeIpStats.Marshal(b, m, deterministic)
}
func (m *SegmentRoutingTeIpStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingTeIpStats.Merge(m, src)
}
func (m *SegmentRoutingTeIpStats) XXX_Size() int {
	return xxx_messageInfo_SegmentRoutingTeIpStats.Size(m)
}
func (m *SegmentRoutingTeIpStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingTeIpStats.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingTeIpStats proto.InternalMessageInfo

func (m *SegmentRoutingTeIpStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *SegmentRoutingTeIpStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *SegmentRoutingTeIpStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *SegmentRoutingTeIpStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprSrTeIpStatsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*SrTeIpStats)(nil),
	Field:         25,
	Name:          "jnpr_sr_te_ip_stats_ext",
	Tag:           "bytes,25,opt,name=jnpr_sr_te_ip_stats_ext",
	Filename:      "sr_te_ip_stats.proto",
}

func init() {
	proto.RegisterType((*SrTeIpStats)(nil), "SrTeIpStats")
	proto.RegisterType((*SegmentRoutingTeIpRecord)(nil), "SegmentRoutingTeIpRecord")
	proto.RegisterType((*SegmentRoutingTeIpStats)(nil), "SegmentRoutingTeIpStats")
	proto.RegisterExtension(E_JnprSrTeIpStatsExt)
}

func init() { proto.RegisterFile("sr_te_ip_stats.proto", fileDescriptor_891ddfdc1085283c) }

var fileDescriptor_891ddfdc1085283c = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x8b, 0xd4, 0x30,
	0x14, 0xc6, 0x49, 0x77, 0xaa, 0x3b, 0xaf, 0x23, 0x4a, 0x56, 0x98, 0xac, 0x1e, 0x2c, 0x3d, 0x68,
	0x4f, 0x45, 0xf6, 0x20, 0xe8, 0x49, 0x04, 0xc1, 0xf1, 0xb0, 0x48, 0xea, 0xc9, 0x4b, 0xa8, 0xdd,
	0xb7, 0x4b, 0xdc, 0x69, 0x12, 0x92, 0x37, 0x38, 0x73, 0xf5, 0xe2, 0x1f, 0xe2, 0x3f, 0x2a, 0x6d,
	0xac, 0x46, 0xd8, 0xb9, 0x7e, 0xdf, 0xef, 0x4b, 0xcb, 0x8f, 0x07, 0x8f, 0x83, 0x57, 0x84, 0x4a,
	0x3b, 0x15, 0xa8, 0xa3, 0xd0, 0x38, 0x6f, 0xc9, 0x3e, 0x39, 0x23, 0xdc, 0xe2, 0x80, 0xe4, 0x0f,
	0x8a, 0xac, 0x8b, 0x61, 0xf5, 0x01, 0x8a, 0xd6, 0x7f, 0xc6, 0x8d, 0x6b, 0x47, 0x92, 0xbf, 0x86,
	0x22, 0x19, 0x0a, 0x56, 0x9e, 0xd4, 0xc5, 0xc5, 0x79, 0xd3, 0xe2, 0xcd, 0x80, 0x86, 0xa4, 0xdd,
	0x91, 0x36, 0x37, 0x23, 0x2e, 0xb1, 0xb7, 0xfe, 0x4a, 0x2e, 0x69, 0x9e, 0x56, 0x3f, 0x33, 0x10,
	0xc7, 0x38, 0xfe, 0x02, 0x56, 0x64, 0xc7, 0x77, 0x9d, 0xc7, 0x6b, 0xbd, 0x17, 0x59, 0x99, 0xd5,
	0xcb, 0x77, 0xf9, 0x8f, 0xb7, 0xd9, 0x29, 0x93, 0x40, 0x76, 0xe3, 0x3e, 0x4d, 0x05, 0x7f, 0x09,
	0x8f, 0x7a, 0xbb, 0xb5, 0x5e, 0xe9, 0x2b, 0x34, 0xa4, 0xaf, 0x35, 0x7a, 0x71, 0x52, 0xb2, 0xfa,
	0xc1, 0x0c, 0x3f, 0x9c, 0xea, 0xcd, 0xdf, 0x96, 0xbf, 0x82, 0x33, 0x6d, 0x02, 0x75, 0xa6, 0xc7,
	0x74, 0xb4, 0x48, 0x47, 0x7c, 0x26, 0x92, 0x5d, 0x0d, 0xab, 0xde, 0xee, 0x0c, 0xa1, 0x57, 0xa6,
	0x1b, 0x50, 0xe4, 0x25, 0xfb, 0xf7, 0x4b, 0xc5, 0x9f, 0xea, 0xb2, 0x1b, 0x90, 0x37, 0x90, 0x47,
	0x1d, 0xf7, 0x4a, 0x56, 0x17, 0x17, 0xe2, 0x0e, 0x1d, 0x93, 0x02, 0x19, 0xb1, 0xea, 0x17, 0x83,
	0xf5, 0x11, 0x84, 0x3f, 0x83, 0xfb, 0xae, 0xeb, 0x6f, 0x71, 0x92, 0xcb, 0xea, 0xc5, 0xf4, 0x41,
	0xc1, 0xe4, 0x9c, 0xf2, 0xa7, 0x90, 0x7f, 0x3d, 0x10, 0x06, 0x91, 0xa5, 0x75, 0xcc, 0xf8, 0x73,
	0x28, 0x22, 0xa7, 0x7c, 0x47, 0x38, 0x89, 0x89, 0x48, 0xc9, 0x24, 0xc4, 0x46, 0x76, 0x84, 0xbc,
	0x82, 0xe5, 0x38, 0x88, 0xd4, 0x22, 0xa5, 0x4e, 0xc7, 0x7c, 0x64, 0xde, 0x7c, 0x81, 0xf5, 0x37,
	0xe3, 0xbc, 0xfa, 0xff, 0x56, 0x14, 0xee, 0x89, 0xaf, 0x9b, 0x8f, 0x3b, 0xa3, 0x1d, 0xfa, 0x4b,
	0xa4, 0xef, 0xd6, 0xdf, 0x86, 0x16, 0x4d, 0xb0, 0x3e, 0x88, 0xf3, 0x49, 0xc0, 0xaa, 0x49, 0x4e,
	0x46, 0xf2, 0xf1, 0x95, 0x24, 0x78, 0xbf, 0xa7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xf3,
	0x98, 0x90, 0x81, 0x02, 0x00, 0x00,
}
