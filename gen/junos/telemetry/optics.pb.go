// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: optics.proto

package telemetry

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type Optics struct {
	OpticsDiag           []*OpticsInfos `protobuf:"bytes,1,rep,name=Optics_diag,json=OpticsDiag" json:"Optics_diag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Optics) Reset()         { *m = Optics{} }
func (m *Optics) String() string { return proto.CompactTextString(m) }
func (*Optics) ProtoMessage()    {}
func (*Optics) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b02cb96ddad460a, []int{0}
}
func (m *Optics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Optics.Unmarshal(m, b)
}
func (m *Optics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Optics.Marshal(b, m, deterministic)
}
func (m *Optics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Optics.Merge(m, src)
}
func (m *Optics) XXX_Size() int {
	return xxx_messageInfo_Optics.Size(m)
}
func (m *Optics) XXX_DiscardUnknown() {
	xxx_messageInfo_Optics.DiscardUnknown(m)
}

var xxx_messageInfo_Optics proto.InternalMessageInfo

func (m *Optics) GetOpticsDiag() []*OpticsInfos {
	if m != nil {
		return m.OpticsDiag
	}
	return nil
}

//
// Optics Interface information
//
type OpticsInfos struct {
	// Interface name, e.g., xe-0/0/0
	IfName *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`
	// Global Index
	SnmpIfIndex *uint32 `protobuf:"varint,2,opt,name=snmp_if_index,json=snmpIfIndex" json:"snmp_if_index,omitempty"`
	// Optics module Diagnostics statistics
	OpticsDiagStats      *OpticsDiagStats `protobuf:"bytes,3,opt,name=optics_diag_stats,json=opticsDiagStats" json:"optics_diag_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *OpticsInfos) Reset()         { *m = OpticsInfos{} }
func (m *OpticsInfos) String() string { return proto.CompactTextString(m) }
func (*OpticsInfos) ProtoMessage()    {}
func (*OpticsInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b02cb96ddad460a, []int{1}
}
func (m *OpticsInfos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsInfos.Unmarshal(m, b)
}
func (m *OpticsInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsInfos.Marshal(b, m, deterministic)
}
func (m *OpticsInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsInfos.Merge(m, src)
}
func (m *OpticsInfos) XXX_Size() int {
	return xxx_messageInfo_OpticsInfos.Size(m)
}
func (m *OpticsInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsInfos.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsInfos proto.InternalMessageInfo

func (m *OpticsInfos) GetIfName() string {
	if m != nil && m.IfName != nil {
		return *m.IfName
	}
	return ""
}

func (m *OpticsInfos) GetSnmpIfIndex() uint32 {
	if m != nil && m.SnmpIfIndex != nil {
		return *m.SnmpIfIndex
	}
	return 0
}

func (m *OpticsInfos) GetOpticsDiagStats() *OpticsDiagStats {
	if m != nil {
		return m.OpticsDiagStats
	}
	return nil
}

//
// Optics Diagnostics stats
//
type OpticsDiagStats struct {
	OpticsType *uint32 `protobuf:"varint,1,opt,name=optics_type,json=opticsType" json:"optics_type,omitempty"`
	// Module temperature
	ModuleTemp *float64 `protobuf:"fixed64,2,opt,name=module_temp,json=moduleTemp" json:"module_temp,omitempty"`
	// Module temperature threshold information
	ModuleTempHighAlarmThreshold   *float64 `protobuf:"fixed64,3,opt,name=module_temp_high_alarm_threshold,json=moduleTempHighAlarmThreshold" json:"module_temp_high_alarm_threshold,omitempty"`
	ModuleTempLowAlarmThreshold    *float64 `protobuf:"fixed64,4,opt,name=module_temp_low_alarm_threshold,json=moduleTempLowAlarmThreshold" json:"module_temp_low_alarm_threshold,omitempty"`
	ModuleTempHighWarningThreshold *float64 `protobuf:"fixed64,5,opt,name=module_temp_high_warning_threshold,json=moduleTempHighWarningThreshold" json:"module_temp_high_warning_threshold,omitempty"`
	ModuleTempLowWarningThreshold  *float64 `protobuf:"fixed64,6,opt,name=module_temp_low_warning_threshold,json=moduleTempLowWarningThreshold" json:"module_temp_low_warning_threshold,omitempty"`
	// laser output power threshold information
	LaserOutputPowerHighAlarmThresholdDbm   *float64 `protobuf:"fixed64,7,opt,name=laser_output_power_high_alarm_threshold_dbm,json=laserOutputPowerHighAlarmThresholdDbm" json:"laser_output_power_high_alarm_threshold_dbm,omitempty"`
	LaserOutputPowerLowAlarmThresholdDbm    *float64 `protobuf:"fixed64,8,opt,name=laser_output_power_low_alarm_threshold_dbm,json=laserOutputPowerLowAlarmThresholdDbm" json:"laser_output_power_low_alarm_threshold_dbm,omitempty"`
	LaserOutputPowerHighWarningThresholdDbm *float64 `protobuf:"fixed64,9,opt,name=laser_output_power_high_warning_threshold_dbm,json=laserOutputPowerHighWarningThresholdDbm" json:"laser_output_power_high_warning_threshold_dbm,omitempty"`
	LaserOutputPowerLowWarningThresholdDbm  *float64 `protobuf:"fixed64,10,opt,name=laser_output_power_low_warning_threshold_dbm,json=laserOutputPowerLowWarningThresholdDbm" json:"laser_output_power_low_warning_threshold_dbm,omitempty"`
	// laser rx power threshold information
	LaserRxPowerHighAlarmThresholdDbm   *float64 `protobuf:"fixed64,11,opt,name=laser_rx_power_high_alarm_threshold_dbm,json=laserRxPowerHighAlarmThresholdDbm" json:"laser_rx_power_high_alarm_threshold_dbm,omitempty"`
	LaserRxPowerLowAlarmThresholdDbm    *float64 `protobuf:"fixed64,12,opt,name=laser_rx_power_low_alarm_threshold_dbm,json=laserRxPowerLowAlarmThresholdDbm" json:"laser_rx_power_low_alarm_threshold_dbm,omitempty"`
	LaserRxPowerHighWarningThresholdDbm *float64 `protobuf:"fixed64,13,opt,name=laser_rx_power_high_warning_threshold_dbm,json=laserRxPowerHighWarningThresholdDbm" json:"laser_rx_power_high_warning_threshold_dbm,omitempty"`
	LaserRxPowerLowWarningThresholdDbm  *float64 `protobuf:"fixed64,14,opt,name=laser_rx_power_low_warning_threshold_dbm,json=laserRxPowerLowWarningThresholdDbm" json:"laser_rx_power_low_warning_threshold_dbm,omitempty"`
	// laser bias current threshold information
	LaserBiasCurrentHighAlarmThreshold   *float64 `protobuf:"fixed64,15,opt,name=laser_bias_current_high_alarm_threshold,json=laserBiasCurrentHighAlarmThreshold" json:"laser_bias_current_high_alarm_threshold,omitempty"`
	LaserBiasCurrentLowAlarmThreshold    *float64 `protobuf:"fixed64,16,opt,name=laser_bias_current_low_alarm_threshold,json=laserBiasCurrentLowAlarmThreshold" json:"laser_bias_current_low_alarm_threshold,omitempty"`
	LaserBiasCurrentHighWarningThreshold *float64 `protobuf:"fixed64,17,opt,name=laser_bias_current_high_warning_threshold,json=laserBiasCurrentHighWarningThreshold" json:"laser_bias_current_high_warning_threshold,omitempty"`
	LaserBiasCurrentLowWarningThreshold  *float64 `protobuf:"fixed64,18,opt,name=laser_bias_current_low_warning_threshold,json=laserBiasCurrentLowWarningThreshold" json:"laser_bias_current_low_warning_threshold,omitempty"`
	// Module temperature alarm information
	ModuleTempHighAlarm   *bool `protobuf:"varint,19,opt,name=module_temp_high_alarm,json=moduleTempHighAlarm" json:"module_temp_high_alarm,omitempty"`
	ModuleTempLowAlarm    *bool `protobuf:"varint,20,opt,name=module_temp_low_alarm,json=moduleTempLowAlarm" json:"module_temp_low_alarm,omitempty"`
	ModuleTempHighWarning *bool `protobuf:"varint,21,opt,name=module_temp_high_warning,json=moduleTempHighWarning" json:"module_temp_high_warning,omitempty"`
	ModuleTempLowWarning  *bool `protobuf:"varint,22,opt,name=module_temp_low_warning,json=moduleTempLowWarning" json:"module_temp_low_warning,omitempty"`
	// Optics module lane Diagnostics statistics
	OpticsLaneDiagStats  []*OpticsDiagLaneStats `protobuf:"bytes,23,rep,name=optics_lane_diag_stats,json=opticsLaneDiagStats" json:"optics_lane_diag_stats,omitempty"`
	WavelengthChannel    *string                `protobuf:"bytes,24,opt,name=wavelength_channel,json=wavelengthChannel" json:"wavelength_channel,omitempty"`
	WavelengthSetpoint   *string                `protobuf:"bytes,25,opt,name=wavelength_setpoint,json=wavelengthSetpoint" json:"wavelength_setpoint,omitempty"`
	TxDither             *string                `protobuf:"bytes,26,opt,name=tx_dither,json=txDither" json:"tx_dither,omitempty"`
	FrequencyError       *string                `protobuf:"bytes,27,opt,name=frequency_error,json=frequencyError" json:"frequency_error,omitempty"`
	WavelengthError      *string                `protobuf:"bytes,28,opt,name=wavelength_error,json=wavelengthError" json:"wavelength_error,omitempty"`
	TecFault             *string                `protobuf:"bytes,29,opt,name=tec_fault,json=tecFault" json:"tec_fault,omitempty"`
	WUnlockedAlarm       *string                `protobuf:"bytes,30,opt,name=w_unlocked_alarm,json=wUnlockedAlarm" json:"w_unlocked_alarm,omitempty"`
	TxTuneAlarm          *string                `protobuf:"bytes,31,opt,name=tx_tune_alarm,json=txTuneAlarm" json:"tx_tune_alarm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *OpticsDiagStats) Reset()         { *m = OpticsDiagStats{} }
func (m *OpticsDiagStats) String() string { return proto.CompactTextString(m) }
func (*OpticsDiagStats) ProtoMessage()    {}
func (*OpticsDiagStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b02cb96ddad460a, []int{2}
}
func (m *OpticsDiagStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsDiagStats.Unmarshal(m, b)
}
func (m *OpticsDiagStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsDiagStats.Marshal(b, m, deterministic)
}
func (m *OpticsDiagStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsDiagStats.Merge(m, src)
}
func (m *OpticsDiagStats) XXX_Size() int {
	return xxx_messageInfo_OpticsDiagStats.Size(m)
}
func (m *OpticsDiagStats) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsDiagStats.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsDiagStats proto.InternalMessageInfo

func (m *OpticsDiagStats) GetOpticsType() uint32 {
	if m != nil && m.OpticsType != nil {
		return *m.OpticsType
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTemp() float64 {
	if m != nil && m.ModuleTemp != nil {
		return *m.ModuleTemp
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempHighAlarmThreshold() float64 {
	if m != nil && m.ModuleTempHighAlarmThreshold != nil {
		return *m.ModuleTempHighAlarmThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempLowAlarmThreshold() float64 {
	if m != nil && m.ModuleTempLowAlarmThreshold != nil {
		return *m.ModuleTempLowAlarmThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempHighWarningThreshold() float64 {
	if m != nil && m.ModuleTempHighWarningThreshold != nil {
		return *m.ModuleTempHighWarningThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempLowWarningThreshold() float64 {
	if m != nil && m.ModuleTempLowWarningThreshold != nil {
		return *m.ModuleTempLowWarningThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserOutputPowerHighAlarmThresholdDbm() float64 {
	if m != nil && m.LaserOutputPowerHighAlarmThresholdDbm != nil {
		return *m.LaserOutputPowerHighAlarmThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserOutputPowerLowAlarmThresholdDbm() float64 {
	if m != nil && m.LaserOutputPowerLowAlarmThresholdDbm != nil {
		return *m.LaserOutputPowerLowAlarmThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserOutputPowerHighWarningThresholdDbm() float64 {
	if m != nil && m.LaserOutputPowerHighWarningThresholdDbm != nil {
		return *m.LaserOutputPowerHighWarningThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserOutputPowerLowWarningThresholdDbm() float64 {
	if m != nil && m.LaserOutputPowerLowWarningThresholdDbm != nil {
		return *m.LaserOutputPowerLowWarningThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserRxPowerHighAlarmThresholdDbm() float64 {
	if m != nil && m.LaserRxPowerHighAlarmThresholdDbm != nil {
		return *m.LaserRxPowerHighAlarmThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserRxPowerLowAlarmThresholdDbm() float64 {
	if m != nil && m.LaserRxPowerLowAlarmThresholdDbm != nil {
		return *m.LaserRxPowerLowAlarmThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserRxPowerHighWarningThresholdDbm() float64 {
	if m != nil && m.LaserRxPowerHighWarningThresholdDbm != nil {
		return *m.LaserRxPowerHighWarningThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserRxPowerLowWarningThresholdDbm() float64 {
	if m != nil && m.LaserRxPowerLowWarningThresholdDbm != nil {
		return *m.LaserRxPowerLowWarningThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserBiasCurrentHighAlarmThreshold() float64 {
	if m != nil && m.LaserBiasCurrentHighAlarmThreshold != nil {
		return *m.LaserBiasCurrentHighAlarmThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserBiasCurrentLowAlarmThreshold() float64 {
	if m != nil && m.LaserBiasCurrentLowAlarmThreshold != nil {
		return *m.LaserBiasCurrentLowAlarmThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserBiasCurrentHighWarningThreshold() float64 {
	if m != nil && m.LaserBiasCurrentHighWarningThreshold != nil {
		return *m.LaserBiasCurrentHighWarningThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserBiasCurrentLowWarningThreshold() float64 {
	if m != nil && m.LaserBiasCurrentLowWarningThreshold != nil {
		return *m.LaserBiasCurrentLowWarningThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempHighAlarm() bool {
	if m != nil && m.ModuleTempHighAlarm != nil {
		return *m.ModuleTempHighAlarm
	}
	return false
}

func (m *OpticsDiagStats) GetModuleTempLowAlarm() bool {
	if m != nil && m.ModuleTempLowAlarm != nil {
		return *m.ModuleTempLowAlarm
	}
	return false
}

func (m *OpticsDiagStats) GetModuleTempHighWarning() bool {
	if m != nil && m.ModuleTempHighWarning != nil {
		return *m.ModuleTempHighWarning
	}
	return false
}

func (m *OpticsDiagStats) GetModuleTempLowWarning() bool {
	if m != nil && m.ModuleTempLowWarning != nil {
		return *m.ModuleTempLowWarning
	}
	return false
}

func (m *OpticsDiagStats) GetOpticsLaneDiagStats() []*OpticsDiagLaneStats {
	if m != nil {
		return m.OpticsLaneDiagStats
	}
	return nil
}

func (m *OpticsDiagStats) GetWavelengthChannel() string {
	if m != nil && m.WavelengthChannel != nil {
		return *m.WavelengthChannel
	}
	return ""
}

func (m *OpticsDiagStats) GetWavelengthSetpoint() string {
	if m != nil && m.WavelengthSetpoint != nil {
		return *m.WavelengthSetpoint
	}
	return ""
}

func (m *OpticsDiagStats) GetTxDither() string {
	if m != nil && m.TxDither != nil {
		return *m.TxDither
	}
	return ""
}

func (m *OpticsDiagStats) GetFrequencyError() string {
	if m != nil && m.FrequencyError != nil {
		return *m.FrequencyError
	}
	return ""
}

func (m *OpticsDiagStats) GetWavelengthError() string {
	if m != nil && m.WavelengthError != nil {
		return *m.WavelengthError
	}
	return ""
}

func (m *OpticsDiagStats) GetTecFault() string {
	if m != nil && m.TecFault != nil {
		return *m.TecFault
	}
	return ""
}

func (m *OpticsDiagStats) GetWUnlockedAlarm() string {
	if m != nil && m.WUnlockedAlarm != nil {
		return *m.WUnlockedAlarm
	}
	return ""
}

func (m *OpticsDiagStats) GetTxTuneAlarm() string {
	if m != nil && m.TxTuneAlarm != nil {
		return *m.TxTuneAlarm
	}
	return ""
}

//
// Optics Diagnostics lane stats
//
type OpticsDiagLaneStats struct {
	LaneNumber *uint32 `protobuf:"varint,1,opt,name=lane_number,json=laneNumber" json:"lane_number,omitempty"`
	// lane Module temperature
	LaneLaserTemperature *float64 `protobuf:"fixed64,2,opt,name=lane_laser_temperature,json=laneLaserTemperature" json:"lane_laser_temperature,omitempty"`
	// Laser receive power
	LaneLaserOutputPowerDbm *float32 `protobuf:"fixed32,3,opt,name=lane_laser_output_power_dbm,json=laneLaserOutputPowerDbm" json:"lane_laser_output_power_dbm,omitempty"`
	// Laser transmit power
	LaneLaserReceiverPowerDbm *float32 `protobuf:"fixed32,4,opt,name=lane_laser_receiver_power_dbm,json=laneLaserReceiverPowerDbm" json:"lane_laser_receiver_power_dbm,omitempty"`
	// Laser receive power
	LaneLaserBiasCurrent *float64 `protobuf:"fixed64,5,opt,name=lane_laser_bias_current,json=laneLaserBiasCurrent" json:"lane_laser_bias_current,omitempty"`
	//lane laser output power alarm
	LaneLaserOutputPowerHighAlarm   *bool `protobuf:"varint,6,opt,name=lane_laser_output_power_high_alarm,json=laneLaserOutputPowerHighAlarm" json:"lane_laser_output_power_high_alarm,omitempty"`
	LaneLaserOutputPowerLowAlarm    *bool `protobuf:"varint,7,opt,name=lane_laser_output_power_low_alarm,json=laneLaserOutputPowerLowAlarm" json:"lane_laser_output_power_low_alarm,omitempty"`
	LaneLaserOutputPowerHighWarning *bool `protobuf:"varint,8,opt,name=lane_laser_output_power_high_warning,json=laneLaserOutputPowerHighWarning" json:"lane_laser_output_power_high_warning,omitempty"`
	LaneLaserOutputPowerLowWarning  *bool `protobuf:"varint,9,opt,name=lane_laser_output_power_low_warning,json=laneLaserOutputPowerLowWarning" json:"lane_laser_output_power_low_warning,omitempty"`
	//lane laser receiver power alarm
	LaneLaserReceiverPowerHighAlarm   *bool `protobuf:"varint,10,opt,name=lane_laser_receiver_power_high_alarm,json=laneLaserReceiverPowerHighAlarm" json:"lane_laser_receiver_power_high_alarm,omitempty"`
	LaneLaserReceiverPowerLowAlarm    *bool `protobuf:"varint,11,opt,name=lane_laser_receiver_power_low_alarm,json=laneLaserReceiverPowerLowAlarm" json:"lane_laser_receiver_power_low_alarm,omitempty"`
	LaneLaserReceiverPowerHighWarning *bool `protobuf:"varint,12,opt,name=lane_laser_receiver_power_high_warning,json=laneLaserReceiverPowerHighWarning" json:"lane_laser_receiver_power_high_warning,omitempty"`
	LaneLaserReceiverPowerLowWarning  *bool `protobuf:"varint,13,opt,name=lane_laser_receiver_power_low_warning,json=laneLaserReceiverPowerLowWarning" json:"lane_laser_receiver_power_low_warning,omitempty"`
	//lane laser output power alarm
	LaneLaserBiasCurrentHighAlarm   *bool    `protobuf:"varint,14,opt,name=lane_laser_bias_current_high_alarm,json=laneLaserBiasCurrentHighAlarm" json:"lane_laser_bias_current_high_alarm,omitempty"`
	LaneLaserBiasCurrentLowAlarm    *bool    `protobuf:"varint,15,opt,name=lane_laser_bias_current_low_alarm,json=laneLaserBiasCurrentLowAlarm" json:"lane_laser_bias_current_low_alarm,omitempty"`
	LaneLaserBiasCurrentHighWarning *bool    `protobuf:"varint,16,opt,name=lane_laser_bias_current_high_warning,json=laneLaserBiasCurrentHighWarning" json:"lane_laser_bias_current_high_warning,omitempty"`
	LaneLaserBiasCurrentLowWarning  *bool    `protobuf:"varint,17,opt,name=lane_laser_bias_current_low_warning,json=laneLaserBiasCurrentLowWarning" json:"lane_laser_bias_current_low_warning,omitempty"`
	LaneTxLossOfSignalAlarm         *bool    `protobuf:"varint,18,opt,name=lane_tx_loss_of_signal_alarm,json=laneTxLossOfSignalAlarm" json:"lane_tx_loss_of_signal_alarm,omitempty"`
	LaneRxLossOfSignalAlarm         *bool    `protobuf:"varint,19,opt,name=lane_rx_loss_of_signal_alarm,json=laneRxLossOfSignalAlarm" json:"lane_rx_loss_of_signal_alarm,omitempty"`
	LaneTxLaserDisabledAlarm        *bool    `protobuf:"varint,20,opt,name=lane_tx_laser_disabled_alarm,json=laneTxLaserDisabledAlarm" json:"lane_tx_laser_disabled_alarm,omitempty"`
	MediaFecCorrBits                *uint64  `protobuf:"varint,21,opt,name=media_fec_corr_bits,json=mediaFecCorrBits" json:"media_fec_corr_bits,omitempty"`
	MediaFecUncorrBlocks            *uint64  `protobuf:"varint,22,opt,name=media_fec_uncorr_blocks,json=mediaFecUncorrBlocks" json:"media_fec_uncorr_blocks,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *OpticsDiagLaneStats) Reset()         { *m = OpticsDiagLaneStats{} }
func (m *OpticsDiagLaneStats) String() string { return proto.CompactTextString(m) }
func (*OpticsDiagLaneStats) ProtoMessage()    {}
func (*OpticsDiagLaneStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b02cb96ddad460a, []int{3}
}
func (m *OpticsDiagLaneStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsDiagLaneStats.Unmarshal(m, b)
}
func (m *OpticsDiagLaneStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsDiagLaneStats.Marshal(b, m, deterministic)
}
func (m *OpticsDiagLaneStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsDiagLaneStats.Merge(m, src)
}
func (m *OpticsDiagLaneStats) XXX_Size() int {
	return xxx_messageInfo_OpticsDiagLaneStats.Size(m)
}
func (m *OpticsDiagLaneStats) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsDiagLaneStats.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsDiagLaneStats proto.InternalMessageInfo

func (m *OpticsDiagLaneStats) GetLaneNumber() uint32 {
	if m != nil && m.LaneNumber != nil {
		return *m.LaneNumber
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserTemperature() float64 {
	if m != nil && m.LaneLaserTemperature != nil {
		return *m.LaneLaserTemperature
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerDbm() float32 {
	if m != nil && m.LaneLaserOutputPowerDbm != nil {
		return *m.LaneLaserOutputPowerDbm
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerDbm() float32 {
	if m != nil && m.LaneLaserReceiverPowerDbm != nil {
		return *m.LaneLaserReceiverPowerDbm
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrent() float64 {
	if m != nil && m.LaneLaserBiasCurrent != nil {
		return *m.LaneLaserBiasCurrent
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerHighAlarm() bool {
	if m != nil && m.LaneLaserOutputPowerHighAlarm != nil {
		return *m.LaneLaserOutputPowerHighAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerLowAlarm() bool {
	if m != nil && m.LaneLaserOutputPowerLowAlarm != nil {
		return *m.LaneLaserOutputPowerLowAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerHighWarning() bool {
	if m != nil && m.LaneLaserOutputPowerHighWarning != nil {
		return *m.LaneLaserOutputPowerHighWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerLowWarning() bool {
	if m != nil && m.LaneLaserOutputPowerLowWarning != nil {
		return *m.LaneLaserOutputPowerLowWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerHighAlarm() bool {
	if m != nil && m.LaneLaserReceiverPowerHighAlarm != nil {
		return *m.LaneLaserReceiverPowerHighAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerLowAlarm() bool {
	if m != nil && m.LaneLaserReceiverPowerLowAlarm != nil {
		return *m.LaneLaserReceiverPowerLowAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerHighWarning() bool {
	if m != nil && m.LaneLaserReceiverPowerHighWarning != nil {
		return *m.LaneLaserReceiverPowerHighWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerLowWarning() bool {
	if m != nil && m.LaneLaserReceiverPowerLowWarning != nil {
		return *m.LaneLaserReceiverPowerLowWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrentHighAlarm() bool {
	if m != nil && m.LaneLaserBiasCurrentHighAlarm != nil {
		return *m.LaneLaserBiasCurrentHighAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrentLowAlarm() bool {
	if m != nil && m.LaneLaserBiasCurrentLowAlarm != nil {
		return *m.LaneLaserBiasCurrentLowAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrentHighWarning() bool {
	if m != nil && m.LaneLaserBiasCurrentHighWarning != nil {
		return *m.LaneLaserBiasCurrentHighWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrentLowWarning() bool {
	if m != nil && m.LaneLaserBiasCurrentLowWarning != nil {
		return *m.LaneLaserBiasCurrentLowWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneTxLossOfSignalAlarm() bool {
	if m != nil && m.LaneTxLossOfSignalAlarm != nil {
		return *m.LaneTxLossOfSignalAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneRxLossOfSignalAlarm() bool {
	if m != nil && m.LaneRxLossOfSignalAlarm != nil {
		return *m.LaneRxLossOfSignalAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneTxLaserDisabledAlarm() bool {
	if m != nil && m.LaneTxLaserDisabledAlarm != nil {
		return *m.LaneTxLaserDisabledAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetMediaFecCorrBits() uint64 {
	if m != nil && m.MediaFecCorrBits != nil {
		return *m.MediaFecCorrBits
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetMediaFecUncorrBlocks() uint64 {
	if m != nil && m.MediaFecUncorrBlocks != nil {
		return *m.MediaFecUncorrBlocks
	}
	return 0
}

var E_JnprOpticsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*Optics)(nil),
	Field:         10,
	Name:          "jnpr_optics_ext",
	Tag:           "bytes,10,opt,name=jnpr_optics_ext",
	Filename:      "optics.proto",
}

func init() {
	proto.RegisterType((*Optics)(nil), "Optics")
	proto.RegisterType((*OpticsInfos)(nil), "OpticsInfos")
	proto.RegisterType((*OpticsDiagStats)(nil), "OpticsDiagStats")
	proto.RegisterType((*OpticsDiagLaneStats)(nil), "OpticsDiagLaneStats")
	proto.RegisterExtension(E_JnprOpticsExt)
}

func init() { proto.RegisterFile("optics.proto", fileDescriptor_1b02cb96ddad460a) }

var fileDescriptor_1b02cb96ddad460a = []byte{
	// 1283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0x69, 0x73, 0xdb, 0x36,
	0x10, 0x1d, 0x39, 0x89, 0x8f, 0x95, 0x15, 0x29, 0x90, 0x63, 0x31, 0xf1, 0x25, 0x2b, 0x89, 0xa3,
	0xb4, 0xb5, 0x3b, 0x75, 0x9b, 0xc9, 0x4c, 0x9b, 0x76, 0x5a, 0xdb, 0x39, 0xdc, 0x38, 0x76, 0x43,
	0x2b, 0x93, 0xde, 0x18, 0x9a, 0x82, 0x24, 0x36, 0xbc, 0x0a, 0x82, 0x91, 0xfc, 0xb5, 0x7f, 0xa0,
	0xd3, 0x1f, 0xda, 0xff, 0xd0, 0x01, 0x40, 0x8a, 0x10, 0x09, 0xba, 0xdf, 0x24, 0xe0, 0xed, 0xdb,
	0x87, 0x5d, 0x62, 0x1f, 0x60, 0x39, 0x08, 0x99, 0x63, 0x47, 0x7b, 0x21, 0x0d, 0x58, 0x70, 0xb7,
	0xc9, 0x88, 0x4b, 0x3c, 0xc2, 0xe8, 0x25, 0x66, 0x41, 0x28, 0x17, 0x3b, 0x4f, 0x60, 0xfe, 0x4c,
	0x80, 0xd0, 0x2e, 0x54, 0xe5, 0x2f, 0xdc, 0x77, 0xac, 0xa1, 0x51, 0x69, 0x5f, 0xeb, 0x56, 0xf7,
	0x97, 0xf7, 0xe4, 0xda, 0xb1, 0x3f, 0x08, 0x22, 0x13, 0xe4, 0x9f, 0x23, 0xc7, 0x1a, 0x76, 0xfe,
	0xae, 0xa4, 0x78, 0xb1, 0x87, 0x36, 0x61, 0xc1, 0x19, 0x60, 0xdf, 0xf2, 0x88, 0x51, 0x69, 0xcf,
	0x75, 0x97, 0x0e, 0x6e, 0xfc, 0xf5, 0xed, 0xdc, 0x62, 0xc5, 0x9c, 0x77, 0x06, 0xa7, 0x96, 0x47,
	0x50, 0x07, 0x6a, 0x91, 0xef, 0x85, 0xd8, 0x19, 0x60, 0xc7, 0xef, 0x93, 0x89, 0x31, 0xd7, 0xae,
	0x74, 0x6b, 0x66, 0x95, 0x2f, 0x1e, 0x0f, 0x8e, 0xf9, 0x12, 0x7a, 0x0a, 0xb7, 0x82, 0x4c, 0x02,
	0x8e, 0x98, 0xc5, 0x22, 0xe3, 0x5a, 0xbb, 0xd2, 0xad, 0xee, 0x37, 0xf6, 0xb2, 0xdc, 0xe7, 0x7c,
	0xdd, 0xac, 0x07, 0xb3, 0x0b, 0x9d, 0x7f, 0x1b, 0x50, 0xcf, 0x81, 0xd0, 0x16, 0x54, 0x13, 0x46,
	0x76, 0x19, 0x72, 0x65, 0x3c, 0x27, 0xc8, 0xa5, 0xde, 0x65, 0x48, 0xd0, 0x0e, 0x54, 0xbd, 0xa0,
	0x1f, 0xbb, 0x04, 0x33, 0xe2, 0x85, 0x42, 0x54, 0x45, 0x48, 0x6f, 0x57, 0x4c, 0x90, 0x3b, 0x3d,
	0xe2, 0x85, 0xe8, 0x35, 0xb4, 0x15, 0x1c, 0x1e, 0x39, 0xc3, 0x11, 0xb6, 0x5c, 0x8b, 0x7a, 0x98,
	0x8d, 0x28, 0x89, 0x46, 0x81, 0xdb, 0x17, 0x4a, 0xa7, 0xc1, 0xeb, 0x59, 0xf0, 0x4b, 0x67, 0x38,
	0xfa, 0x8e, 0x63, 0x7b, 0x29, 0x14, 0xbd, 0x82, 0x2d, 0x95, 0xce, 0x0d, 0xc6, 0x05, 0xb6, 0xeb,
	0x2a, 0xdb, 0x5a, 0xc6, 0x76, 0x12, 0x8c, 0x73, 0x64, 0x6f, 0xa0, 0x53, 0xd0, 0x36, 0xb6, 0xa8,
	0xef, 0xf8, 0x43, 0x85, 0xef, 0x86, 0xca, 0xb7, 0x39, 0xab, 0xee, 0x9d, 0x44, 0x67, 0x94, 0x67,
	0xb0, 0x9d, 0xd7, 0x57, 0x64, 0x9c, 0x57, 0x19, 0x37, 0x66, 0x14, 0x16, 0x08, 0x2d, 0xf8, 0xd8,
	0xb5, 0x22, 0x42, 0x71, 0x10, 0xb3, 0x30, 0x66, 0x38, 0x0c, 0xc6, 0x84, 0x6a, 0xcb, 0x88, 0xfb,
	0x17, 0x9e, 0xb1, 0xa0, 0x52, 0x3f, 0x10, 0x91, 0x67, 0x22, 0xf0, 0x07, 0x1e, 0x57, 0x2c, 0xe8,
	0xd1, 0x85, 0x87, 0x30, 0x7c, 0xa4, 0x49, 0xa1, 0x29, 0xad, 0xc8, 0xb0, 0xa8, 0x66, 0xb8, 0x9f,
	0xcf, 0x50, 0x28, 0x32, 0x4f, 0x40, 0x60, 0xb7, 0xec, 0x0c, 0x85, 0xe2, 0x88, 0x1c, 0x4b, 0x6a,
	0x8e, 0x87, 0xba, 0x53, 0xe4, 0xeb, 0xc4, 0xd3, 0xd8, 0xf0, 0x49, 0xc9, 0x39, 0xf4, 0x59, 0x40,
	0xcd, 0xb2, 0xa3, 0x39, 0x89, 0x2e, 0xc9, 0x4f, 0x20, 0xf5, 0x60, 0x3a, 0xf9, 0xbf, 0x5e, 0x54,
	0x55, 0xfe, 0x6d, 0x11, 0x65, 0x4e, 0xae, 0xe8, 0xc3, 0x3b, 0xd8, 0xc9, 0x51, 0x97, 0xf5, 0x60,
	0x59, 0x65, 0x6e, 0xab, 0xcc, 0xda, 0xfa, 0xff, 0x06, 0x8f, 0x74, 0x9a, 0xf5, 0x55, 0xa9, 0xa9,
	0xdc, 0xf7, 0xf2, 0xaa, 0x75, 0x25, 0xf9, 0x05, 0xba, 0x1a, 0xdd, 0x7a, 0xf6, 0x9b, 0x2a, 0x7b,
	0x27, 0xa7, 0x5c, 0x47, 0xfe, 0x73, 0x5a, 0xef, 0x0b, 0xc7, 0x8a, 0xb0, 0x1d, 0x53, 0x4a, 0x7c,
	0xa6, 0x1f, 0x23, 0xf5, 0x22, 0xf7, 0x81, 0x63, 0x45, 0x87, 0x32, 0x46, 0x33, 0x4c, 0x7e, 0x4c,
	0x0b, 0x3e, 0xc3, 0xad, 0x9b, 0x29, 0x8d, 0x62, 0x2b, 0x15, 0xea, 0xe2, 0x64, 0xf9, 0x3d, 0xad,
	0x78, 0x51, 0x75, 0x71, 0x1c, 0xdc, 0x2a, 0xde, 0xa8, 0x9c, 0xee, 0xc2, 0x54, 0xf8, 0x35, 0x2d,
	0x79, 0x41, 0x79, 0x91, 0x1e, 0x15, 0x1b, 0x3a, 0xab, 0xbd, 0xc0, 0xfe, 0x39, 0xac, 0xea, 0x67,
	0xb6, 0xd1, 0x6c, 0x57, 0xba, 0x8b, 0x66, 0x53, 0x33, 0xa2, 0xd1, 0x67, 0x70, 0x5b, 0x3b, 0x99,
	0x8d, 0x15, 0x11, 0x83, 0x8a, 0x83, 0x18, 0x3d, 0x01, 0xa3, 0x6c, 0xfe, 0x1a, 0xb7, 0x45, 0xd4,
	0x6d, 0xed, 0xb8, 0x45, 0x8f, 0xa1, 0x55, 0x32, 0x65, 0x8d, 0x55, 0x11, 0xb7, 0xa2, 0x1b, 0xaa,
	0xe8, 0x18, 0x56, 0x13, 0x53, 0x73, 0x2d, 0x9f, 0xa8, 0x5e, 0xd9, 0x12, 0xa6, 0xbd, 0xa2, 0x78,
	0xe5, 0x89, 0xe5, 0x13, 0xe9, 0x97, 0x4d, 0x19, 0xc3, 0x17, 0x32, 0x7f, 0xdc, 0x05, 0x34, 0xb6,
	0x3e, 0x10, 0x97, 0xf8, 0x43, 0x36, 0xc2, 0xf6, 0xc8, 0xf2, 0x7d, 0xe2, 0x1a, 0x46, 0xbb, 0xd2,
	0x5d, 0x32, 0x6f, 0x65, 0x3b, 0x87, 0x72, 0x03, 0x7d, 0x0a, 0x4d, 0x05, 0x1e, 0x11, 0x16, 0x06,
	0x8e, 0xcf, 0x8c, 0x3b, 0x02, 0xaf, 0x30, 0x9d, 0x27, 0x3b, 0x68, 0x0d, 0x96, 0xd8, 0x04, 0xf7,
	0x1d, 0x36, 0x22, 0xd4, 0xb8, 0x2b, 0x60, 0x8b, 0x6c, 0x72, 0x24, 0xfe, 0xa3, 0x87, 0x50, 0x1f,
	0x50, 0xf2, 0x67, 0x4c, 0x7c, 0xfb, 0x12, 0x13, 0x4a, 0x03, 0x6a, 0xac, 0x09, 0xc8, 0xcd, 0xe9,
	0xf2, 0x33, 0xbe, 0x8a, 0x1e, 0x41, 0x43, 0x49, 0x2b, 0x91, 0xeb, 0x02, 0x59, 0xcf, 0xd6, 0x25,
	0x94, 0x27, 0x24, 0x36, 0x1e, 0x58, 0xb1, 0xcb, 0x8c, 0x8d, 0x24, 0x21, 0xb1, 0x9f, 0xf3, 0xff,
	0xa8, 0x0b, 0x8d, 0x31, 0x8e, 0x7d, 0x37, 0xb0, 0xdf, 0x93, 0x7e, 0xd2, 0xd6, 0x4d, 0x99, 0x71,
	0xfc, 0x36, 0x59, 0x96, 0x2d, 0xed, 0x40, 0x8d, 0x4d, 0x30, 0x8b, 0x7d, 0x92, 0xc0, 0xb6, 0x04,
	0xac, 0xca, 0x26, 0xbd, 0xd8, 0x27, 0x02, 0xd3, 0xf9, 0x67, 0x19, 0x9a, 0x9a, 0x42, 0xf3, 0x27,
	0x85, 0xe8, 0x8b, 0x1f, 0x7b, 0x17, 0x84, 0xca, 0x37, 0x47, 0xfa, 0x1a, 0x02, 0xbe, 0x73, 0x2a,
	0x36, 0xd0, 0x57, 0xb0, 0x2a, 0x70, 0xf2, 0x06, 0xf0, 0x2f, 0x80, 0x50, 0x8b, 0xc5, 0x94, 0xcc,
	0xbe, 0x42, 0x56, 0x38, 0xe8, 0x84, 0x63, 0x7a, 0x19, 0x04, 0x1d, 0xc2, 0x9a, 0x12, 0x3c, 0xe3,
	0x14, 0x7c, 0x3e, 0xf1, 0xa7, 0xc8, 0x5c, 0xca, 0xd0, 0x9a, 0x32, 0x28, 0xbe, 0xc0, 0x87, 0xd2,
	0x0b, 0xd8, 0x50, 0x48, 0x28, 0xb1, 0x89, 0xf3, 0x81, 0x50, 0x85, 0xe6, 0xba, 0x4a, 0x73, 0x67,
	0x4a, 0x63, 0x26, 0xc8, 0x29, 0xd1, 0x63, 0x68, 0x29, 0x44, 0xea, 0x65, 0x96, 0xcf, 0x0e, 0xe5,
	0x10, 0xca, 0x9d, 0x45, 0xc7, 0xd0, 0x29, 0x3b, 0x84, 0x72, 0x59, 0xe7, 0xc5, 0x55, 0xd8, 0xd0,
	0x1d, 0x22, 0xbb, 0xb6, 0x2f, 0x60, 0xbb, 0x8c, 0x2a, 0xbb, 0xc2, 0x0b, 0x82, 0x69, 0x5d, 0xc7,
	0x34, 0xbd, 0xcc, 0xaf, 0xe1, 0xfe, 0x95, 0x9a, 0xd2, 0x0b, 0xba, 0x28, 0xb8, 0xb6, 0xca, 0x54,
	0xa5, 0x77, 0xf5, 0x15, 0xdc, 0xbb, 0x4a, 0x57, 0xca, 0xb6, 0x24, 0xd8, 0x36, 0x4b, 0x94, 0xa5,
	0x64, 0xb3, 0xda, 0x72, 0xfd, 0x52, 0x2a, 0x06, 0x39, 0x6d, 0x33, 0xfd, 0xca, 0x6a, 0x36, 0xab,
	0x2d, 0x47, 0x97, 0x55, 0xad, 0x9a, 0xd3, 0x36, 0xc3, 0x36, 0xad, 0xdb, 0x1b, 0x6e, 0x42, 0x57,
	0x6a, 0x4b, 0xcf, 0xba, 0x2c, 0xf8, 0xb6, 0xcb, 0xd5, 0xa5, 0xc7, 0x3d, 0x83, 0x07, 0x57, 0xeb,
	0x4b, 0x19, 0x6b, 0x82, 0xb1, 0x5d, 0xaa, 0x30, 0x1b, 0x9c, 0x9d, 0x92, 0xcf, 0x54, 0xad, 0xde,
	0xcd, 0xdc, 0xf7, 0xa6, 0x33, 0xdf, 0xdc, 0xf7, 0xa6, 0x37, 0x5e, 0xe1, 0xe4, 0xea, 0xf7, 0xa6,
	0xf1, 0xda, 0x5c, 0x4f, 0x4b, 0x7d, 0x56, 0x58, 0xb7, 0xda, 0x53, 0xbd, 0xb5, 0xe6, 0x7a, 0x5a,
	0x66, 0xab, 0xc2, 0xab, 0xd5, 0x9e, 0x6a, 0x9d, 0x14, 0x7d, 0x0d, 0x42, 0x3b, 0x66, 0x13, 0xec,
	0x06, 0x51, 0x84, 0x83, 0x01, 0x8e, 0x9c, 0xa1, 0x6f, 0xb9, 0xc9, 0xf9, 0x90, 0x60, 0x11, 0x57,
	0xbf, 0x37, 0x39, 0x09, 0xa2, 0xe8, 0x6c, 0x70, 0x2e, 0xf6, 0xe5, 0xd1, 0xd2, 0x70, 0x5a, 0x12,
	0xde, 0xcc, 0xc2, 0x4d, 0x4d, 0xf8, 0x37, 0x4a, 0x76, 0x71, 0x9a, 0xbe, 0x13, 0x59, 0x17, 0xee,
	0x74, 0x72, 0x4b, 0x43, 0x36, 0x92, 0xec, 0x1c, 0x71, 0x94, 0x00, 0x64, 0xfc, 0x17, 0xd0, 0xf4,
	0x48, 0xdf, 0xb1, 0xf0, 0x80, 0xd8, 0xd8, 0x0e, 0x28, 0x2f, 0x07, 0x8b, 0x84, 0x23, 0x5f, 0x17,
	0x33, 0xcd, 0xa8, 0x98, 0x0d, 0x81, 0x78, 0x4e, 0xec, 0xc3, 0x80, 0xd2, 0x03, 0x87, 0x45, 0xe8,
	0x29, 0xb4, 0xb2, 0xa8, 0xd8, 0x97, 0x71, 0xdc, 0x1a, 0x22, 0xe1, 0xc9, 0xd3, 0xc8, 0x95, 0x34,
	0xf2, 0xad, 0xc0, 0x1c, 0x08, 0xc8, 0x97, 0x2f, 0xa1, 0xfe, 0x87, 0x1f, 0x52, 0x9c, 0xf8, 0x33,
	0x99, 0x30, 0xd4, 0xda, 0xfb, 0x3e, 0xf6, 0x9d, 0x90, 0xd0, 0x53, 0xc2, 0xc6, 0x01, 0x7d, 0x1f,
	0x9d, 0x13, 0x3f, 0x0a, 0x68, 0x24, 0x6e, 0x69, 0x75, 0x7f, 0x21, 0x31, 0x6b, 0xb3, 0xc6, 0x03,
	0xe5, 0xef, 0x67, 0x13, 0xf6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x4a, 0x1f, 0xc3, 0xbc,
	0x0f, 0x00, 0x00,
}
