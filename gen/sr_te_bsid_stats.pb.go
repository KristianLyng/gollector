// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sr_te_bsid_stats.proto

package gen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type SrTeBsidStats struct {
	// List of SR TE stats per BSID, IP and Color records
	TeBsidStats          []*SegmentRoutingTeBsidRecord `protobuf:"bytes,1,rep,name=te_bsid_stats,json=teBsidStats" json:"te_bsid_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *SrTeBsidStats) Reset()         { *m = SrTeBsidStats{} }
func (m *SrTeBsidStats) String() string { return proto.CompactTextString(m) }
func (*SrTeBsidStats) ProtoMessage()    {}
func (*SrTeBsidStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_c99674bf69207578, []int{0}
}

func (m *SrTeBsidStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SrTeBsidStats.Unmarshal(m, b)
}
func (m *SrTeBsidStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SrTeBsidStats.Marshal(b, m, deterministic)
}
func (m *SrTeBsidStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrTeBsidStats.Merge(m, src)
}
func (m *SrTeBsidStats) XXX_Size() int {
	return xxx_messageInfo_SrTeBsidStats.Size(m)
}
func (m *SrTeBsidStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SrTeBsidStats.DiscardUnknown(m)
}

var xxx_messageInfo_SrTeBsidStats proto.InternalMessageInfo

func (m *SrTeBsidStats) GetTeBsidStats() []*SegmentRoutingTeBsidRecord {
	if m != nil {
		return m.TeBsidStats
	}
	return nil
}

//
// SR TE BSID statistics record
//
type SegmentRoutingTeBsidRecord struct {
	// Name of the BSID
	BsidIdentifier *uint64 `protobuf:"varint,1,req,name=bsid_identifier,json=bsidIdentifier" json:"bsid_identifier,omitempty"`
	// Ip prefix of endpoint
	ToIpPrefix *string `protobuf:"bytes,2,req,name=to_ip_prefix,json=toIpPrefix" json:"to_ip_prefix,omitempty"`
	// Policy color value
	ColorIdentifier *uint32 `protobuf:"varint,3,opt,name=color_identifier,json=colorIdentifier" json:"color_identifier,omitempty"`
	// Instance Identifier for cases when RPD creates multiple instances
	InstanceIdentifier *uint32 `protobuf:"varint,4,opt,name=instance_identifier,json=instanceIdentifier" json:"instance_identifier,omitempty"`
	// Name of the counter. This is useful when an SR label has multiple counters.
	// For some scenarios like routing restart, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,5,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Statistics
	Stats                *SegmentRoutingTeBsidStats `protobuf:"bytes,6,opt,name=stats" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SegmentRoutingTeBsidRecord) Reset()         { *m = SegmentRoutingTeBsidRecord{} }
func (m *SegmentRoutingTeBsidRecord) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingTeBsidRecord) ProtoMessage()    {}
func (*SegmentRoutingTeBsidRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_c99674bf69207578, []int{1}
}

func (m *SegmentRoutingTeBsidRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentRoutingTeBsidRecord.Unmarshal(m, b)
}
func (m *SegmentRoutingTeBsidRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentRoutingTeBsidRecord.Marshal(b, m, deterministic)
}
func (m *SegmentRoutingTeBsidRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingTeBsidRecord.Merge(m, src)
}
func (m *SegmentRoutingTeBsidRecord) XXX_Size() int {
	return xxx_messageInfo_SegmentRoutingTeBsidRecord.Size(m)
}
func (m *SegmentRoutingTeBsidRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingTeBsidRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingTeBsidRecord proto.InternalMessageInfo

func (m *SegmentRoutingTeBsidRecord) GetBsidIdentifier() uint64 {
	if m != nil && m.BsidIdentifier != nil {
		return *m.BsidIdentifier
	}
	return 0
}

func (m *SegmentRoutingTeBsidRecord) GetToIpPrefix() string {
	if m != nil && m.ToIpPrefix != nil {
		return *m.ToIpPrefix
	}
	return ""
}

func (m *SegmentRoutingTeBsidRecord) GetColorIdentifier() uint32 {
	if m != nil && m.ColorIdentifier != nil {
		return *m.ColorIdentifier
	}
	return 0
}

func (m *SegmentRoutingTeBsidRecord) GetInstanceIdentifier() uint32 {
	if m != nil && m.InstanceIdentifier != nil {
		return *m.InstanceIdentifier
	}
	return 0
}

func (m *SegmentRoutingTeBsidRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *SegmentRoutingTeBsidRecord) GetStats() *SegmentRoutingTeBsidStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type SegmentRoutingTeBsidStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentRoutingTeBsidStats) Reset()         { *m = SegmentRoutingTeBsidStats{} }
func (m *SegmentRoutingTeBsidStats) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingTeBsidStats) ProtoMessage()    {}
func (*SegmentRoutingTeBsidStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_c99674bf69207578, []int{2}
}

func (m *SegmentRoutingTeBsidStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentRoutingTeBsidStats.Unmarshal(m, b)
}
func (m *SegmentRoutingTeBsidStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentRoutingTeBsidStats.Marshal(b, m, deterministic)
}
func (m *SegmentRoutingTeBsidStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingTeBsidStats.Merge(m, src)
}
func (m *SegmentRoutingTeBsidStats) XXX_Size() int {
	return xxx_messageInfo_SegmentRoutingTeBsidStats.Size(m)
}
func (m *SegmentRoutingTeBsidStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingTeBsidStats.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingTeBsidStats proto.InternalMessageInfo

func (m *SegmentRoutingTeBsidStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *SegmentRoutingTeBsidStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *SegmentRoutingTeBsidStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *SegmentRoutingTeBsidStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprSrTeBsidStatsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*SrTeBsidStats)(nil),
	Field:         24,
	Name:          "jnpr_sr_te_bsid_stats_ext",
	Tag:           "bytes,24,opt,name=jnpr_sr_te_bsid_stats_ext",
	Filename:      "sr_te_bsid_stats.proto",
}

func init() {
	proto.RegisterType((*SrTeBsidStats)(nil), "SrTeBsidStats")
	proto.RegisterType((*SegmentRoutingTeBsidRecord)(nil), "SegmentRoutingTeBsidRecord")
	proto.RegisterType((*SegmentRoutingTeBsidStats)(nil), "SegmentRoutingTeBsidStats")
	proto.RegisterExtension(E_JnprSrTeBsidStatsExt)
}

func init() { proto.RegisterFile("sr_te_bsid_stats.proto", fileDescriptor_c99674bf69207578) }

var fileDescriptor_c99674bf69207578 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x6f, 0xd4, 0x30,
	0x14, 0x84, 0xe5, 0x74, 0x17, 0xda, 0x97, 0x6e, 0x8b, 0x5c, 0x04, 0xee, 0xf6, 0x40, 0x94, 0x03,
	0xe4, 0x14, 0x55, 0x3d, 0x70, 0xe0, 0x02, 0xaa, 0xc4, 0xa1, 0x1c, 0xaa, 0xca, 0xe1, 0x6e, 0xd2,
	0xe4, 0xb5, 0x32, 0x6d, 0x6c, 0xcb, 0x7e, 0x2b, 0xb6, 0x57, 0xfe, 0x0b, 0xbf, 0x82, 0x3f, 0x87,
	0x12, 0x37, 0x34, 0x8b, 0xd8, 0xeb, 0xcc, 0x37, 0x23, 0x6b, 0xfc, 0xe0, 0x55, 0xf0, 0x8a, 0x50,
	0x5d, 0x07, 0xdd, 0xaa, 0x40, 0x35, 0x85, 0xd2, 0x79, 0x4b, 0x76, 0x79, 0x44, 0x78, 0x8f, 0x1d,
	0x92, 0x7f, 0x50, 0x64, 0x5d, 0x14, 0xf3, 0x2b, 0x58, 0x54, 0xfe, 0x2b, 0x9e, 0x07, 0xdd, 0x56,
	0x3d, 0xcb, 0x3f, 0xc2, 0x62, 0x23, 0x2c, 0x58, 0xb6, 0x53, 0xa4, 0x67, 0x27, 0x65, 0x85, 0xb7,
	0x1d, 0x1a, 0x92, 0x76, 0x45, 0xda, 0xdc, 0xc6, 0x88, 0xc4, 0xc6, 0xfa, 0x56, 0xa6, 0xf4, 0x54,
	0x90, 0xff, 0x4e, 0x60, 0xb9, 0x9d, 0xe5, 0x25, 0x1c, 0x0e, 0xe5, 0xba, 0x45, 0x43, 0xfa, 0x46,
	0xa3, 0x17, 0x2c, 0x4b, 0x8a, 0xd9, 0xf9, 0xfc, 0xe7, 0xa7, 0x64, 0x97, 0xc9, 0x83, 0xde, 0xbd,
	0xf8, 0x6b, 0xf2, 0x77, 0xb0, 0x4f, 0x56, 0x69, 0xa7, 0x9c, 0xc7, 0x1b, 0xbd, 0x16, 0x49, 0x96,
	0x14, 0x7b, 0x23, 0x0c, 0x64, 0x2f, 0xdc, 0xd5, 0x60, 0xf0, 0x53, 0x78, 0xd1, 0xd8, 0x7b, 0xeb,
	0xa7, 0xcd, 0x3b, 0x19, 0x2b, 0x16, 0x23, 0x7c, 0x38, 0xd8, 0x93, 0xea, 0xf7, 0x70, 0xa4, 0x4d,
	0xa0, 0xda, 0x34, 0x38, 0x0d, 0xcd, 0xa6, 0x21, 0x3e, 0x12, 0x93, 0x5c, 0x01, 0xfb, 0x8d, 0x5d,
	0x19, 0x42, 0xaf, 0x4c, 0xdd, 0xa1, 0x98, 0x67, 0xec, 0xe9, 0x49, 0xe9, 0xa3, 0x75, 0x59, 0x77,
	0xc8, 0x4f, 0x61, 0x1e, 0x47, 0x7c, 0x96, 0xb1, 0x22, 0x3d, 0x5b, 0xfe, 0x77, 0xc4, 0x61, 0x36,
	0x19, 0xc1, 0xfc, 0x17, 0x83, 0xe3, 0xad, 0x10, 0x7f, 0x03, 0xcf, 0x5d, 0xdd, 0xdc, 0xe1, 0xf0,
	0x2d, 0xec, 0x71, 0x34, 0xc1, 0xe4, 0xa8, 0xf2, 0x13, 0x98, 0x5f, 0x3f, 0x10, 0x06, 0x91, 0x4c,
	0xed, 0xa8, 0xf1, 0xb7, 0x90, 0x46, 0x4e, 0xf9, 0x9a, 0x70, 0x18, 0x27, 0x22, 0x19, 0x93, 0x10,
	0x1d, 0x59, 0x13, 0xf2, 0x1c, 0xf6, 0xfa, 0x40, 0xa4, 0x66, 0x53, 0x6a, 0xb7, 0xd7, 0x7b, 0xe6,
	0xc3, 0x37, 0x38, 0xfe, 0x6e, 0x9c, 0x57, 0xff, 0xde, 0x9a, 0xc2, 0x35, 0xf1, 0xd7, 0xe5, 0x97,
	0x95, 0xd1, 0x0e, 0xfd, 0x25, 0xd2, 0x0f, 0xeb, 0xef, 0x42, 0x85, 0x26, 0x58, 0x1f, 0x84, 0x18,
	0x66, 0x38, 0x28, 0x37, 0x4e, 0x4e, 0xbe, 0xec, 0x9b, 0x36, 0xa4, 0xcf, 0x6b, 0xfa, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xbd, 0x1f, 0x92, 0xa6, 0xc7, 0x02, 0x00, 0x00,
}
